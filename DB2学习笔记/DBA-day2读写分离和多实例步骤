MYSQL性能优化
MYSQL数据读写分离
MYSQL多实例
+++++++++++++++++++++++++++++++++++++++++++++++
MYSQL性能调优
MYSQL工作原理:

1:mysql服务的工作过程
管理工具:MYSQL服务软件安装后提供的命令
连接池:检查本机是否有资源响应处理当前的连接请求,空闲的线程,也有空闲的资源
SQL接口:把SQL命令传递给MYSQL服务的进程处理
分析器:检查执行的SQL命令是否有语法错误,包括访问权限
优化器:优化执行的SQL命令使其能最节省资源的方式运行
查询缓存:查询缓存的存储空间是从系统物理内存里划分出来的,用来存储查询过的查寻结果.
存储引擎:软件自带的功能程序,是用来处理表的处理器.
文件系统:数据库服务器存储数据的磁盘.

2.MYSQL优化:
*****数据库服务器处理客户端的连接请求慢是由那些原因导致的.

	网络带宽问题网络接口的流量 
 	 服务器的硬件配置(服务器资源的使用率)CPU分钟负载   内存  磁盘存储空间和磁盘的i/o读取慢
	 提供数据库服务软件版本低.
	 查看服务运行时的参数设置: /etc/my.cnf 
查看变量值: 
	 mysql> show variables\G;
 	 show variables   like    "%timeout%";
MYSQL配置文件详解或帮助手册
 
 常用的参数有哪些?
	mysql> show variables   like    "%conn%";
并发连接数:max_connections  最大并发连接数
修改变量的值:   查看有过的最大连接数除以并发连接数约等于0.85
刷新状态信息:mysql> flush   status;
再  mysql> show  global  status  like  "max_used_connections";
查看有过的最大连接数:看状态信息
mysql> show  global status like "max_used_connections";
命令行修改最大并发值:set  global  变量名=值 
	 mysql> set   global max_connections=500;
永久修改:vim  /etc/my.cnf
		[mysql]
		变量名=值

查看所有线程有关的变量:
默认可以重复使用的线程的数量:
mysql> show variables   like    "%thread%";
		thread_cache_size  =9

默认为所有线程缓存的打开的表的数量
mysql> show variables   like    "%table%";
		table_open_cache   | 2000 |所有线程缓存的打开的表的数量

用于MyISAM引擎的关键索引缓存大小
mysql> show variables   like    "%key_buffer_size%";
		key_buffer-size =8388608=8M  (单位字节) 设置存储索引信息的缓存空间大小

查寻结果排序
为每个要排序的线程分配此大小的缓存空间
mysql> show variables   like    "%sort%";

为顺序读取表记录保留的缓存大小
show    variables   like   "%read%" ;
      read_buffer_size	 为顺序读取表记录保留的缓存大小

查看数据库服务查询缓存相关的设置
mysql> show  variables  like  "%query_cache%";
query_cache_type             | OFF |
1  on   2  on  0  off     
 1on不超缓存限制  
 2on指定查询结果要往缓存里放   select   sql_in_cache  字段名列表
query_cache_min_res_unit     | 4096  默认存储小格子大小
query_cache_limit            | 1048576  默认允许的查询缓存空间
query_cache_wlock_invalidate | OFF
当对myisam存储引擎的表,查询的时候,若此时客户对表执行写操作,mysql服务不会从缓存里查找数据返回给客户端,而是等写操作完成后,重新从表里查找数据返回给客户端query_cache_wlock_invalidate  OFF

查询缓存统计信息:
mysql> show  global  status  like  "qcache%";
  Qcache_inserts          | 0  | 如果查询结果是在查询缓存里找到的此变量的值就会自动加一  
  Qcache_lowmem_prunes    | 0  | 只要我接受到一次查询请求就会自动加一(查询总数)
  Qcache_lowmem_prunes    | 0  | 删除一次加一次,说明查询缓存给小了

程序员编写的访问数据库服务数据的SQL命令复杂导致处理速度慢.
在数据库服务器上启用man查询日志,记录超过指定时间显示查询结果的SQL命令
binlog日志  错误日志  查询日志  慢查询日志

查询日志:记录所有的SQL命令
1:启用日志
[mysqld]
general-log  主机名.log
cat  主机名.log
查询日志	记录客户端连接和查询操作	general-log   general-log-file=

慢查询日志:只记录超过超时时间显示查询结果的SQL命令
vim  /etc/my.cnf 
[mysql]
启用慢查询日志slow-query-log
log_queries_not_using_indexes=1  没有使用索引查询的SQL命令也要记录在慢日志文件里
host10-slow.log  主机名+slow.log  慢查询日志文件名
[root@host10 mysql]# mysqldumpslow  host10-slow.log   统计慢查询记录的SQL命令信息输出到屏幕
[root@host10 mysql]# mysqldumpslow  host10-slow.log  > /root/sqltxt  统计给程序员是超出查询时间(10秒)的SQL命令做优化

数据存储架构有问题:数据传输时有瓶颈 

调优思路总结::::::::::::::::::::::::::::
升级硬件	CPU 、内存、硬盘
加大网络带宽	付费加大带宽
调整mysql服务运行参数	并发连接数、连接超时时间、重复使用的线程数........
调整与查询相关的参数	查询缓存、索引缓存.......
启用慢查询日志	slow-query-log
网络架构不合理	调整网络架构

把客户端访问数据库服务时的查询请求和写数据的请求给不同的数据库服务器处理
读操作select(slave)告诉程序员只要是查询都写slave的IP     写操作insert/delete/update(master) 告诉程序员只要是查询都写master的IP 
读操作select(slave)
写操作insert/delete/update
告诉程序员写代理服务器的IP


3.MYSQL数据读写分离   
(1)部署MYSQL数据读写分离架构
配置MYSQL主从同步,把IP20配置为IP10的从库 
验证:主从同步  实现同步即可
mysql中间件  mysql-proxy  mycat  maxscale
(2)在主机100上搭建代理服务器实现数据读写分离(IP100)
cd soft/mysql   ls
4.100装包: rpm  -ivh   maxscale-2.1.2-1.rhel.7.x86_64.rpm 
[root@host100 mysql]# rpm -qc  maxscale
主配置文件 先备份一份
[root@host100 mysql]#   cp  /etc/maxscale.cnf /etc/maxscale.cnf.bak
[root@host100 mysql]# ls /etc/maxscale.cnf
4.100代理服务器上修改配置文件  
vim  /etc/maxscale.cnf    :set   nu显示行号
	 10 threads=auto

18 [server1] 服务器主机名
 19 type=server
 20 address=192.168.4.10  master主机IP地址
 21 port=3306   端口
 22 protocol=MySQLBackend   后端协议
 23 
 24 [server2]  服务器主机名
 25 type=server
 26 address=192.168.4.20  slave主机IP地址
 27 port=3306
 28 protocol=MySQLBackend   后端协议


35[MySQL Monitor] //定义要监视的数据库服务器
36type=monitor
37module=mysqlmon
38servers=server1,server2  //定义的主、从数据库服务器主机名
39user=scalemon     //用户名(随便设置)
40passwd=123456   //密码(随便设置)
41monitor_interval=10000
52--58注释掉
 52 #[Read-Only Service]
 53 #type=service
 54 #router=readconnroute
 55 #servers=server1
 56 #user=myuser
 57 #passwd=mypwd
 58 #router_options=slave

64 [Read-Write Service]
 65 type=service
 66 router=readwritesplit
 67 servers=server1,server2
 68 user=maxscale  用这个用户连接4.100去验证server1,server2授权库有没有连接的用户
 69 passwd=123456
 70 max_slave_connections=100%
定义管理服务不用动
 76 [MaxAdmin Service]
 77 type=service
 78 router=cli
86-90注释掉
 86 #[Read-Only Listener]
 87 #type=listener
 88 #service=Read-Only Service
 89 #protocol=MySQLClient
 90 #port=4008
92--102不用动加一个端口
 92 [Read-Write Listener]
 93 type=listener
 94 service=Read-Write Service
 95 protocol=MySQLClient
 96 port=4006 读写服务的端口
 97 
 98 [MaxAdmin Listener]
 99 type=listener
100 service=MaxAdmin Service
101 protocol=maxscaled
102 socket=default
103 port=4009
 
并根据配置文件在主库上添加对应的授权用户
scalemon
192.168.4.10
mysql> grant replication slave, replication client on *.* to scalemon@'%'  identified by “123456”;  //创建监控用户  
mysql> grant  select on  mysql.*  to  maxscale@"%"  identified  by  "123456";//创建路由用户
mysql> grant  all  on db12.*  from  yaya@"%"  identified  by  "123456";//创建访问数据用户

测试用户是否可以登陆
[root@host10 ~]# mysql  -umaxscale  -p123456
[root@host20 ~]# mysql  -umaxscale  -p123456
[root@host100 mysql]# mysql  -h192.168.4.10  -uscalemon  -p123456
[root@host100 mysql]# mysql  -h192.168.4.20  -uscalemon  -p123456
启动服务
[root@host100 mysql]# maxscale  -f /etc/maxscale.cnf
查看服务信息
[root@host100 mysql]# ps  -C  maxscale
  PID TTY          TIME CMD
 6046 ?        00:00:00 maxscale
[root@host100 mysql]# netstat  -utnlp  |  grep  maxscale
tcp6       0      0 :::4006                 :::*                    LISTEN      6046/maxscale       
tcp6       0      0 :::4009                 :::*                    LISTEN      6046/maxscale

测试配置
1在主机4.100连接管理服务查看监控信息
[root@host100 ~]# maxadmin  -uadmin  -pmariadb  -P4009管理端口
		    MaxScale> list servers
-------------------+-----------------+-------+-------------+--------------------
Server             | Address         | Port  |     Connections 	| Status              
-------------------+-----------------+-------+-------------+--------------------
server1            | 192.168.4.10    |  3306 |           0 		| Master, Running
server2            | 192.168.4.20    |  3306 |           0 		| Slave, Running
-------------------+-----------------+-------+-------------+--------------------
		    MaxScale> exit    退出

客户端主机120
[root@host120 ~]# mysql  -h192.168.4.100 -P4006  -uyaya  -p123456
mysql> select  @@hostname; 默认访问读主机
+------------+
| @@hostname |
+------------+
| host20     |
+----------------



在客户端连接4.100主机,访问数据是实现数据读写分离
4.10为写主机select  *  from  db12.a ; 不会出现从库的数据
4.20为读主机
[root@host20 mysql]# mysql   -uroot  -p123456
mysql> insert  into  db12.a  values (888888)
4.120为客户端
mysql> select  *  from  db12.a;  可以看到20主机上的数据,因为4.10为写主机写入的数据会同步到4.20主机上的
2在客户端连接4.100主机,访问数据是实现数据读写分离



4.MYSQL多实例
多实例概述
什么是多实例
	在一台物理主机上运行多个数据库服务

为什么要使用多实例
	节约运维成本
	提高硬件利用率	
******配置步骤*******************************************************
配置步骤说
安装支持多实例服务的软件包
修改主配置文件
根据配置文件做相应设置
初始化授权库
启动服务
客户端访问
[root@host50 ]#  systemctl stop mysqld  停掉不支持的5.7版本数据库服务
[root@host50 ]# systemctl disable mysqld 设置开机不自启
mysql>  show processlist ; 查看进程,登陆名,客户端地址

配置步骤
(1)安装支持多实例服务的软件包4.50机器上
[root@host50 mysql]# cd  soft/mysql  ls 
[root@host50 mysql]# tar -zxf  mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz 
tar完之后生成同名的文件夹mysql-5.7.20-linux-glibc2.12-x86_64
[root@host50 mysql]# cd mysql-5.7.20-linux-glibc2.12-x86_64/
[root@host50 mysql-5.7.20-linux-glibc2.12-x86_64]# ls 
bin  COPYING  docs  include  lib  man  README  share  support-files
[root@host50 ~]#mv   mysql-5.7.20-linux-glibc2.12-x86_64  /usr/local/mysql
[root@host50 ~]#cd  /usr/local/mysql/
[root@host50 ~]#vim /etc/profile
export  PATH=/usr/local/mysql/bin:$PATH
[root@host50 ~]#source  /etc/profile
[root@host50 ~]#echo $PATH

(2)修改主配置文件,创建主配置文件
备份原有文件并编写
[root@host50 ~]# cp  /etc/my.cnf  /etc/my.cnf.bak
vim   /etc/my.cnf


[mysqld_multi]     //启用多实例
mysqld=/usr/local/mysql/bin/mysqld_safe   //指定进程文件的路径
mysqladmin=/usr/local/mysql/bin/mysqladmin     //指定管理命令路径
user=root     //指定调用进程的用户

[mysqld1]    //实例进程名称 ,X表示实例名称,如 [mysql2
port=3307       //端口号
datadir=/dir3307      //数据库目录 ，要手动创建 
socket=/dir3307/mysql3307.sock      //指定sock文件的路径和名称
pid-file=/dir3307/mysql.pid     //进程pid号文件位置
log-error=/dir3307/mysql.err    //错误日志位置

[mysqld2]      //实例进程名称 ,X表示实例名称,如 [mysql2
port=3308     //端口号
datadir=/dir3308      //数据库目录 ，要手动创建 
socket=/dir3308/mysql3308.sock    //指定sock文件的路径和名称   
pid-file=/dir3308/mysql.pid       /进程pid号文件位置
log-error=/dir3308/mysql.err        //错误日志位置

(3)创建配置文件指定的数据库目录
[root@host50 ~]# mkdir /dir3307 创建配置文件指定的数据库目录/dir3307
更改/dir3307所属者所属主
chown mysql:mysql  /dir3307/
[root@host50 ~]# mkdir /dir3308 创建配置文件指定的数据库目录/dir3308
更改/dir3308所属者所属主
chown mysql:mysql  /dir3308/

(4)初始化数据库目录并记录显示初始密码
[root@host50 ~]# mysqld --user=mysql  --basedir=/usr/local/mysql  --datadir=/dir3307  --initialize 
3307密码   root@localhost:   5T5a6aj__=Wi
[root@host50 ~]# mysqld --user=mysql  --basedir=/usr/local/mysql  --datadir=/dir3308  --initialize
3308密码  root@localhost:     guxN+xSju05l  
[root@host50 ~]#mysqld_multi  start  1  (启动代号1的数据库服务)
[root@host50 ~]#netstat  -utnlp |  grep  :3307
[root@host50 ~]#mysqld_multi  start  2  (启动代号2的数据库服务) 
[root@host50 ~]#  231  netstat  -utnlp |  grep  :3308

(5)登陆指定的多实例数据库服务(3307) 连接生成的SOCK文件
[root@host50 ~]# mysql  -uroot   -p'5T5a6aj__=Wi'  -S  /dir3307/mysql3307.sock
mysql> alter  user  root@"localhost"  identified  by  "123456";
登陆指定的多实例数据库服务(3308) 连接生成的SOCK文件
[root@host50 ~]#mysql  -uroot   -p'guxN+xSju05l'  -S  /dir3308/mysql3308.sock
mysql> alter  user  root@"localhost"  identified  by  "123456";

停止指定的实例服务
[root@host50 ~]# mysqld_multi  --user=root  --password=123456 stop  1 
[root@host50 ~]# mysqld_multi  --user=root  --password=123456 stop  2






































